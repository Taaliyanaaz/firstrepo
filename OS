14. Let the parent fork and let the child execute ls command with exec. Observe the result with and without having wait()  system call in the parent.

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) {
        // This code is executed by the child process
        char* args[] = { "ls", "-l", NULL };
        execvp("ls", args);
        perror("Exec failed");
        return 1;
    } else {
        // This code is executed by the parent process
        // With wait()
        int status;
        wait(&status);
        printf("Child process has finished.\n");

        // Without wait()
        // sleep(2); // Uncomment this line if you want to observe without wait()
        printf("Parent process continues without waiting.\n");
    }

    return 0;
}


15. Create two threads in a main program, let the first thread execute a function to display a message namely ”this is thread one” , similarly let the second thread displays ”this is thread two”.

#include <stdio.h>
#include <pthread.h>

// Function for the first thread
void *threadFunction1(void *arg) {
    printf("This is thread one\n");
    return NULL;
}

// Function for the second thread
void *threadFunction2(void *arg) {
    printf("This is thread two\n");
    return NULL;
}

int main() {
    pthread_t t1, t2;

    // Create two threads and start them
    pthread_create(&t1, NULL, threadFunction1, NULL);
    pthread_create(&t2, NULL, threadFunction2, NULL);

    // Wait for both threads to finish
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    return 0;
}
